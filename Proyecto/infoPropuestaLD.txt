Sistemas de archivos
	-Los métodos y estructuras de datos que un sistema operativo utiliza para seguir la pista de los archivos de un disco o partición.
		+Un archivo  es un conjunto independiente de datos.
		+Toda la información en una computadora por ejemplo esta agrupada en forma de archivos.
	-La manera en la que se organizan los archivos en el disco.
	-Construir un sistema de archivos:
		+Iniciar la estructura de datos en el disco.


Xq usar un Arbol B+?
	-La razon principal es por velocidad.
	-Cuando hablamos de memoria, no todo puede ser almacenado siempre en memoria principal. Es por esto que tenemos que utilizar discos para almacenarla. Si uno observa una jerarquia de memorias en cuanto a su velocidad vemos arriba a los registros, la cache, la memoria principal y luego los discos duros. Es decir el acceso a memoria en un disco duro es muy lento y es por esto que necesitamos encontrar una manera de ordenar la informacion de manera que no se tengan que hacer muchos accesos a memoria.
		+En disco los datos son almacenados en paginas. Lo que se hace es que las hojas apuntan a pagians de disco.



B+ Tree:
	-Estos arboles son mayormente usados para indexar bases de datos, son los ideales.
	-Este arbol es una generalizacion de un arbol de busqueda binaria, con la diferencia de permite tener muchas llaves por nodo.
	-Orden es la maxima cantidad de elementos que se pueden almacenar en una hoja.


	-Un arbol B+ es un arbol balanceado en donde todo camino de la raiz a una hoja es del mismo tamanno.
		+Que la diferencia entre los subnodos de la izq y los de la derecha es de max 1
	-Todas las hojas estan en el mismo nivel.
	-Las llaves en el arbol estan ordenadas.
	-La raiz debe tener al menos 2 hijos.


	-Cada nodo interno en el arbol tiene entre [(n+1)/2, (n+1)] punteros.
	-Cada nodo interno en el arbol (menos la raiz) tiene entre [n/2, n] llaves de busqueda.
	-Cada hoja debe de tener entre [n/2, n] punteros.
	-Las hojas contienen TODAS las llaves. Por lo general las hojas como datos tienen punteros.
	-Dentro de un arbol B+ todas las hojas estan enlazadas como en una lista enlazada.
		+Como los datos en las hojas estan ordenados, los rangos de busqueda son muy eficientes.


	-Basado en su definicion es fácil mantenerlo balanceado. Por ejemplo, no hay que balancearlo despues de editarlo.
	-El tiempo de busqueda en un arbol B+ es mucho mas corto que en otros tipos de arboles.
		+El detalle esta en como definir su tamano para hacerlo tan eficiente.
	-Como los arboles B+ no tienen datos en los nodos interiores, se pueden meter mas llaves en una pagina. Es por esto que la cache va a tener menos misses a la hora de accesar datos de una hoja.
		+Los nodos interiores simplemente dirigen hacia la hoja donde se encuentra el dato que queremos.
	-A nivel macro en 1 nodo pueden haber cientos, hasta miles de llaves por lo que hace a estos arboles poco profundos y rapidos de recorrer.

	-Imaginemos tamannos de datos de billones de lineas. Con un arbol tipo B+ se pueden almacenar billones de llaves (con punteros a billones de lineas) a una altura de 3, 4 o 5. Esto significa que para accesar un dato tenemos que hace como mucho 5 accesos al disco, lo cual es un gran ahorro de tiempo comparado con otras estructuras de datos, digamos un arbol binario.
	
	-Valores tipicos en practica:
		+Orden tipico: 200
		+Fill factor: 66%
		+Fanout: 133

		+Ejemplo de la cantidad de data pointers para un tamano n:	
			133^n * 132 
			+ n=3 approx 310M 



Plataforma 
	-Se va a trabajar sobre Linux.
	-Se va a utilizar el lenguaje C++ para implementarlo.
		+Orientado a objetos.
		+Manejo de memoria.
		+Con C++ vamos a entender las cosas que pasan y xq pasan.



Entradas y pruebas
	-Objetivo
		+Implementar un arbol tipo B+
		+Realizar pruebas con distintos arichivos.
		+Se va a trabajar con archivos de alguna base de datos o inclusive autogenerados por nosotros.
		+Probar las funcionalidades de agregar datos, de eliminar datos y de buscar datos.
		+Tomar tiempos de ejecucion para estos.
		+Indexar todo un sistema de archivos al arbol.
		+Realizar graficas sobre los resultados para poder hacer un posterior analisis.
		+Se espera comprobar principalmente:
			*Funcionalidad de la estructura .
			*Tiempos de ejecucion.



1-> 8'55"
2->